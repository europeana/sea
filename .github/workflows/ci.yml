name: CI

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v[0-9]+.[0-9]+.*'
  pull_request:
    branches:
      - 'main'
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]
  workflow_dispatch:

env:
  # TODO: this needs to run on a matrix for the various apps in the repo
  DOCKER_REPOSITORY: ${{ vars.DOCKER_REPOSITORY }}

jobs:
  annotate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.head_ref, '/EC-') && github.event.action == 'opened'
    steps:
      -
        name: Extract JIRA ticket number
        run: echo "JIRA_TICKET_NUMBER=$(echo ${{ github.head_ref }} | sed -r 's|^.*/(EC-[0-9]+).*$|\1|')" >> $GITHUB_ENV
      -
        name: Link to JIRA ticket on pull request
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `JIRA ticket: ${process.env.JIRA_TICKET_NUMBER}`
            })

  metadata:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Git metadata, main dispatch
        id: git-main-dispatch
        if: github.event_name == 'workflow_dispatch' && github.event.ref == 'refs/heads/main'
        run: echo "status=true" >> $GITHUB_OUTPUT
      -
        name: Git metadata, main push
        id: git-main-push
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
        run: echo "status=true" >> $GITHUB_OUTPUT
      -
        name: Git metadata, PR draft
        id: git-pr-draft
        if: github.event_name == 'pull_request' && github.event.pull_request.draft == true
        run: echo "status=true" >> $GITHUB_OUTPUT
      -
        name: Git metadata, PR ready for review
        id: git-pr-ready
        if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
        run: echo "status=true" >> $GITHUB_OUTPUT
      -
        name: Docker metadata
        id: docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
      -
        name: Output Docker image full tag
        id: docker-image
        run: |
          echo "full-tag=${{ env.DOCKER_REPOSITORY }}:${{ steps.docker.outputs.version }}" >> $GITHUB_OUTPUT
    outputs:
      docker-full-tag: ${{ steps.docker-image.outputs.full-tag }}
      docker-labels: ${{ steps.docker.outputs.labels }}
      docker-tags: ${{ steps.docker.outputs.tags }}
      docker-version: ${{ steps.docker.outputs.version }}
      git-main-dispatch: ${{ steps.git-main-dispatch.outputs.status }}
      git-main-push: ${{ steps.git-main-push.outputs.status }}
      git-pr-draft: ${{ steps.git-pr-draft.outputs.status }}
      git-pr-ready: ${{ steps.git-pr-ready.outputs.status }}

  # Build, and push to Docker Hub, the final-stage production-ready Docker image,
  # for use throughout other jobs, and for deployment.
  docker-build:
    needs: [metadata]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || (needs.metadata.outputs.git-pr-ready == 'true')
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        if: github.actor != 'dependabot[bot]'
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: app=ds4ch
          pull: true
          push: ${{ github.actor != 'dependabot[bot]' }}
          cache-from: type=gha,scope=${{ github.ref_name }}-app
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-app
          tags: ${{ needs.metadata.outputs.docker-tags }}
          labels: ${{ needs.metadata.outputs.docker-labels }}
      -
        name: Build (from cache) and load app image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: app=ds4ch
          pull: true
          load: true
          tags: ${{ needs.metadata.outputs.docker-full-tag }}
          cache-from: type=gha,scope=${{ github.ref_name }}-app
      -
        # TODO: this should run before the image is pushed
        name: Check image size
        env:
          DOCKER_IMAGE_SIZE_LIMIT: ${{ vars.DOCKER_IMAGE_SIZE_LIMIT }}
        run: |
          docker_image_size=$(docker image inspect --format '{{.Size}}' ${{ needs.metadata.outputs.docker-full-tag }})
          if [ ${docker_image_size} -gt $(numfmt --from=si ${DOCKER_IMAGE_SIZE_LIMIT}) ]; then
            echo "::error ::Image size $(numfmt --to=si ${docker_image_size}) exceeds limit ${DOCKER_IMAGE_SIZE_LIMIT}"
            exit 1
          else
            echo "::notice ::Image size $(numfmt --to=si ${docker_image_size}) within limit ${DOCKER_IMAGE_SIZE_LIMIT}"
          fi
